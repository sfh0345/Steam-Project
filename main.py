# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import serial.tools.list_ports
from serial.tools import list_ports
import serial
import time
import threading

from sys import platform

if platform == "linux" or platform == "linux2":
    pass
elif platform == "darwin":
    pass
elif platform == "win32":
    import ctypes
    ctypes.windll.shcore.SetProcessDpiAwareness(True)

from getsteamuserinfo import getsteamuserinfo
from dashboard import dashboardwindow


# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import tkinter as tk
from PIL import Image, ImageTk
import webbrowser


from pathlib import Path
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")
#path naar de gecurvde vierkanten pngs


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)
#define wat hoort bij het path

def add_image_to_canvas(canvas, image_path, x, y, width, height):
    # Load the image and resize it
    original_image = Image.open(image_path)
    resized_image = original_image.resize((width, height))

    # Create a PhotoImage object from the resized image
    tk_image = ImageTk.PhotoImage(resized_image)

    # Create an image item at the specified coordinates
    canvas.create_image(x, y, anchor=tk.NW, image=tk_image)
    return tk_image

def know_more_clicked(event):
    instructions = (
        "https://steamid.io/"
        )
    webbrowser.open_new_tab(instructions)



def read_serial(port):
    """Read data from serial port and return as string."""
    line = port.read(1000)
    return line.decode()

# First manually select the serial port that connects to the Pico
serial_ports = list_ports.comports()

print("[INFO] Serial ports found:")
for i, port in enumerate(serial_ports):
    print(str(i) + ". " + str(port.device))

pico_port_index = int(input("Which port is the Raspberry Pi Pico connected to? "))
pico_port = serial_ports[pico_port_index].device

def steamidinput(steamid64):
    if len(steamid64) != 17:
        time = canvas.create_text(
            162.0,
            1013.0,
            anchor="nw",
            text="We konden uw SteamID niet vinden. Zorg ervoor dat u het SteamID64 heeft",
            fill="#FFFFFF",
            font=("Motiva Sans Bold", 40 * -1)
        )
        window.after(4000, lambda: canvas.delete(time))
    else:
        status1 = getsteamuserinfo(steamid64)
        if status1 == 0:
            time = canvas.create_text(
                262.0,
                1013.0,
                anchor="nw",
                text="Er is iets mis gegaan. Probeer het later opnieuw",
                fill="#FFFFFF",
                font=("Motiva Sans Bold", 40 * -1)
            )
            window.after(4000, lambda: canvas.delete(time))
        elif status1 == 1:
            time = canvas.create_text(
                340.0,
                1013.0,
                anchor="nw",
                text="Er is geen steam gebruiker gevonden met dat SteamID64",
                fill="#FFFFFF",
                font=("Motiva Sans Bold", 40 * -1)
            )
            window.after(4000, lambda: canvas.delete(time))
        else:
            name = status1[0]
            avatarurl = status1[1]
            status = status1[2]
            window.destroy()
            dashboardwindow(name, avatarurl, status, steamid64)

# Define an event to signal the thread to stop
stop_event = threading.Event()

def serial_thread(stop_event):
    """Function to run serial communication in a separate thread."""

    # Open een verbinding met de Pico
    with serial.Serial(port=pico_port, baudrate=115200, bytesize=8, parity='N', stopbits=1, timeout=1) as serial_port:
        if serial_port.isOpen():
            print("[INFO] Gebruik seriële poort", serial_port.name)
        else:
            print("[INFO] Open seriële poort", serial_port.name, "...")
            serial_port.open()

    # Open een verbinding met de Pico
    with serial.Serial(port=pico_port, baudrate=115200, bytesize=8, parity='N', stopbits=1, timeout=1) as serial_port:
        if serial_port.isOpen():
            pass
        else:
            print("[INFO] Open seriële poort", serial_port.name, "...")
            serial_port.open()

        try:
            steamid_received = False # Flag to indicate if SteamID has been received
            while not steamid_received and not stop_event.is_set():
                # Lees de seriële gegevens van de Pico
                pico_output = read_serial(serial_port)
                pico_output = pico_output.replace('\r\n', ' ')

                # Controleer of de ontvangen gegevens de verwachte indeling hebben
                if pico_output.startswith("steamid64:"):
                    steamid64 = pico_output.split(":")[1].strip()
                    print("[PICO] SteamID64 ontvangen:", steamid64)

                    # Set the flag to True to exit the loop
                    steamid_received = True

                    # Doe hier iets met de ontvangen steamid64, bijv. sla het op in een variabele of bestand.
                    window.after(100, lambda: steamidinput(steamid64))  # Use after() to call steamidinput

                else:
                    # print("[PICO] Ongeldige gegevensindeling ontvangen:", pico_output)
                    pass

                # Een korte pauze om overbelasting te voorkomen
                time.sleep(1)

        except KeyboardInterrupt:
            print("[INFO] Ctrl+C gedetecteerd. Beëindigen.")
        finally:
            # Sluit verbinding met de Pico
            serial_port.close()
            print("[INFO] Loging in with steamcard...")

# Create a thread for serial communication
serial_thread = threading.Thread(target=serial_thread, args=(stop_event,), daemon=True)
serial_thread.start()

# Function to be called when the window is closed
def on_close():
    if serial_thread.is_alive():
        stop_event.set()
        serial_thread.join()  # Wait for the serial thread to finish before exiting
    window.destroy()


window = Tk()

window.geometry("1834x1117")
window.configure(bg = "#FFFFFF")
window.title("Inloggen met Steam...")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 1117,
    width = 1834,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    0.0,
    0.0,
    1834.0,
    1117.0,
    fill="#102431",
    outline="")

canvas.create_text(
    100.0,
    48.0,
    anchor="nw",
    text="Inloggen met",
    fill="#FFFFFF",
    font=("Motiva Sans ExtraBold", 64 * -1)
)
image_path = "assets\logo_steam.png"
image = add_image_to_canvas(canvas, image_path, x=540, y=50, width=267, height=77)



entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    917.0,
    585.0,
    image=entry_image_1
)
canvas.create_text(
    100.0,
    139.0,
    anchor="nw",
    text="This site is not associated with Valve Corp.",
    fill="#CACACA",
    font=("Motiva Sans Regular", 24 * -1)
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    601.0,
    381.0,
    image=entry_image_2
)

text_widget = Text(
    bd=0,
    bg="#33333D",
    fg="#FFFFFF",
    highlightthickness=0,
    wrap="word",  #zorg ervoor dat de woorden binnen de box blijven
    padx=10,  # padding op de box zodat de text niet buiten de box komt
    pady=20,  # padding op de box zodat de text niet butien de box komt
    font=("Motiva Sans Bold", 18),  # pas het font aan naar rubik
)
text_widget.place(
    x=206.0,
    y=336.0,
    width=790.0,
    height=88.0
)

canvas.create_text(
    196.0,
    293.0,
    anchor="nw",
    text="INLOGGEN MET STEAMID-64",
    fill="#1999FF",
    font=("Motiva Sans Medium", 24 * -1)
)

canvas.create_text(
    1164.0,
    293.0,
    anchor="nw",
    text="INLOGGEN MET NFC KAART",
    fill="#1999FF",
    font=("Motiva Sans Medium", 24 * -1)
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    relief="flat"
)
button_1.bind('<Button-1>', know_more_clicked)
button_1.place(
    x=425.0,
    y=799.0,
    width=365.0,
    height=78.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: steamidinput(text_widget.get("1.0", tk.END).strip()),
    relief="flat"
)
button_2.place(
    x=370.0,
    y=605.0,
    width=475.0,
    height=78.0
)


entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    1372.0,
    543.0,
    image=entry_image_3
)


image_path = r"assets/contactless_5227517.png"
image1 = add_image_to_canvas(canvas, image_path, x=1196, y=365, width=350, height=350)

entry_image_4 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
entry_bg_4 = canvas.create_image(
    383.5,
    740.5,
    image=entry_image_4
)

entry_image_5 = PhotoImage(
    file=relative_to_assets("entry_5.png"))
entry_bg_5 = canvas.create_image(
    835.0,
    740.5,
    image=entry_image_5
)

canvas.create_text(
    588.0,
    726.0,
    anchor="nw",
    text="OF",
    fill="#818181",
    font=("Motiva Sans Medium", 24 * -1)
)


canvas.create_text(
    1165.0,
    770.0,
    anchor="nw",
    text="Gebruik uw steamcard om snel in te loggen \nof gebruik uw telefoon",
    fill="#FFFFFF",
    justify='center',
    font=("Motiva Sans Medium", 20 * -1)
)

canvas.create_text(
    240.0,
    456.0,
    anchor="nw",
    text="Je SteamID kan je vinden op verschillende websites.\n Om deze functie te kunnen gebruiken heb je de link van je profiel nodig \nDeze kun je aanmaken in je steam instellingen.",
    fill="#CACACA",
    justify='center',
    font=("Motiva Sans Light", 20 * -1)
)



window.resizable(False, False)

# Bind the stop_event.set() method to the window close event
window.protocol("WM_DELETE_WINDOW", stop_event.set)

window.mainloop()